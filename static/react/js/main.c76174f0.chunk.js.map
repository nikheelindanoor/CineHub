{"version":3,"sources":["Movieslist.js","Forms.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","setAppElement","Movieslist","movies","useState","modalIsopen","setModalIsopen","modalContent","setModalContent","JSON","parse","length","className","isOpen","onRequestClose","style","overlay","backgroundColor","src","href","onClick","class","map","movie","index","styles","width","height","alt","Form","useForm","register","handleSubmit","errors","data","setData","moviedata","setMoviedata","useEffect","fetch","method","body","stringify","movie_input","headers","then","res","json","onSubmit","type","placeholder","name","ref","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"js/main.c76174f0.chunk.js","sourcesContent":["import { useRef, useState} from 'react';\r\nimport Modal from 'react-modal';\r\nModal.setAppElement('#root')\r\nfunction Movieslist({movies}){\r\n\r\n    const [modalIsopen,setModalIsopen] = useState(false);\r\n    const [modalContent, setModalContent] = useState({});\r\n    if(typeof(movies)===\"string\"){\r\n        movies = JSON.parse(movies);\r\n    }\r\n    if(!movies){\r\n        return (\r\n            <div>\r\n                <img styles = {{width:\"200px\",height:\"200px\"}} src=\"https://i.gifer.com/ZZ5H.gif\" alt=\"Yo guys\" />\r\n            </div>\r\n        )\r\n    }\r\n    if(movies.length === 1){\r\n        return(\r\n            <div className=\"invalid_search\">\r\n                <h1>{movies[0][\"title\"]}</h1>\r\n            </div>\r\n        )\r\n    }else{\r\n        return (\r\n            <div className=\"search-results\">\r\n                <Modal isOpen={modalIsopen} onRequestClose={() => setModalIsopen(false)} className=\"modalcontent\" style = {\r\n                    {\r\n                        overlay: {\r\n                            backgroundColor: 'rgba(255,255,255,0.5)'\r\n                        }\r\n                    }\r\n                }>\r\n                <div className=\"left\">\r\n                    <h1>{modalContent[\"title\"]}</h1>\r\n                    <img src={\"https://image.tmdb.org/t/p/original\"+modalContent[\"poster_path\"]} />\r\n                </div>\r\n                <div className=\"right\">\r\n                    <p><span className=\"info-heading\">{\"Director: \"}</span>{modalContent[\"director\"]}</p>\r\n                    <p><span className=\"info-heading\">{\"Cast: \"}</span>{modalContent[\"cast\"]}</p>\r\n                    <p><span className=\"info-heading\">{\"Overview: \"}</span>{modalContent[\"overview\"]}</p>\r\n                    <a href={modalContent[\"homepage\"]} className=\"homepage-link\">Visit homepage</a>\r\n                    <div className=\"close-modal\">\r\n                        <button onClick={()=>setModalIsopen(false)}><i class=\"fas fa-times\"></i></button>\r\n                    </div>\r\n                </div> \r\n               \r\n                </Modal>\r\n                <div className={movies.length === 50 ? \"searched-movie\" : \"not-searched-movie\"} >\r\n                    <p className=\"p-in-search\">Your Search Results</p>\r\n                    <div className=\"searched-movie-details\">\r\n                        <div className=\"left\">\r\n                            <h1>{movies[0][\"title\"]}</h1>\r\n                            <img src={\"https://image.tmdb.org/t/p/original\"+movies[0][\"poster_path\"]} />\r\n                        </div>\r\n                        <div className=\"right\">\r\n                            <p><span className=\"info-heading\">{\"Director: \"}</span>{movies[0][\"director\"]}</p>\r\n                            <p><span className=\"info-heading\">{\"Cast: \"}</span>{movies[0][\"cast\"]}</p>\r\n                            <p><span className=\"info-heading\">{\"Overview: \"}</span>{movies[0][\"overview\"]}</p>\r\n                            <a href={movies[0][\"homepage\"]} className=\"homepage-link\">Visit homepage</a>\r\n                        </div> \r\n                    </div>\r\n                    \r\n                    <p className=\"p-in-search\">Recommended Movies for You</p>\r\n                </div>\r\n                \r\n                <div className=\"Recommendation\">\r\n                    { movies.map((movie,index) => (\r\n                    <div className=\"Movietemplate\"> \r\n                        <img src={\"https://image.tmdb.org/t/p/original\"+movie[\"poster_path\"]} onClick={() => {setModalContent(movie);setModalIsopen(true)}} />\r\n                        <h1 onClick={() => {setModalContent(movie);setModalIsopen(true)}}> {movie[\"title\"]} </h1>\r\n                    </div>\r\n                    ))}\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n// const forwardedmovieslist = forwardRef(Movieslist);\r\nexport default Movieslist;","import React, { useEffect, useState, useRef} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport Movieslist from './Movieslist';\r\nexport default function Form(){\r\n    const {register, handleSubmit, errors} = useForm();\r\n    const [data, setData] = useState({'movie':'homepage'})\r\n    const [moviedata, setMoviedata] = useState({\"data\":null})\r\n    // const search_results = useRef(null);\r\n        \r\n    // const focusOnMovieslist = (search_results) => {\r\n    //     window.scrollTo({top: search_results.current.offsetTop, behavior: \"smooth\"});\r\n    // }\r\n\r\n    const onsubmit = (data) => {\r\n        setData(data);\r\n        // focusOnMovieslist(search_results);\r\n    }\r\n    useEffect(() => {\r\n        setMoviedata({\"data\":null})\r\n        fetch(\"/\",{\r\n            method:\"POST\",\r\n            body: JSON.stringify({ \r\n                movie_input: data, \r\n            }), \r\n            headers: { \r\n                \"Content-type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            } \r\n        })\r\n        .then(res => res.json())\r\n        .then(data => setMoviedata(data))\r\n    },[data])\r\n    return (\r\n        <>\r\n            <form className=\"Form\" onSubmit={handleSubmit(onsubmit)}>\r\n                <input type=\"text\" placeholder=\"Enter Movie name, Eg. Toy Story\" name = \"movie\" ref={register} />\r\n                <button type=\"submit\" class = \"submit-btn\" ><i class=\"fas fa-search\"></i></button>\r\n            </form>\r\n            <Movieslist movies={moviedata[\"data\"]} />\r\n        </>\r\n    );\r\n}","import './App.css';\nimport { useEffect, useState, useMemo, useRef} from 'react';\nimport Forms from './Forms'\nimport Movieslist from './Movieslist';\n\nconst App = () => {\n  // const [movie, setMovie] = useState([{'title':'Avatar'},{'title':'Interstellar'}])\n  const movies = [{'title':'Avatar'},{'title':'Interstellar'}]\n  return (\n    <div className=\"App\">\n      <Forms />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}